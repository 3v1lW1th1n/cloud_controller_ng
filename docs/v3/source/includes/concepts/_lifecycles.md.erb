## Lifecycles

Lifecycles inform the platform of how to build droplets and run apps. For example the
`buildpack` lifecycle will use a droplet and a rootfs to run the app, while a `docker` lifecycle will
pull a Docker image from a registry to run an app.

#### The lifecycle object

Name | Type | Description
---- | ---- | -----------
**type** | _string_ | Type of the lifecycle. Valid values are `buildpack`, `docker`.
**data** | _object_ | Data that is used during staging and running for a lifecycle.

### Buildpack lifecycle

```
Example Buildpack Lifecycle
```

```json
{
  "type": "buildpack",
  "data": {
    "buildpacks": ["java_buildpack"],
    "stack": "cflinuxfs3"
  }
}
```

This is the default lifecycle for Cloud Foundry. When staging an app with this lifecycle, the app source code will be
compiled using a buildpack, resulting in a droplet.  When running an app with this lifecycle, a container running a rootfs
will be created and the droplet will be expanded inside that container to be executed.

#### Buildpack lifecycle object

Name | Type | Description
---- | ---- | -----------
**type** | _string_ | `buildpack`
**data.buildpacks** | _array of strings_ | A list of the names of buildpacks, URLs from which they may be downloaded, or null to auto-detect a suitable buildpack.
**data.stack** | _string_ | The root filesystem to use with the buildpack, for example `cflinuxfs3`

### Docker lifecycle

```
Example Docker Lifecycle
```

```json
{
  "type": "docker",
  "data": {}
}
```

This allows Cloud Foundry to run Docker images. When staging an app with this lifecycle, the Docker registry is queried for
metadata about the image, such as ports and start command.  When running an app with this lifecycle, a container is created
and the Docker image is executed inside of it.

#### Docker lifecycle object

Name | Type | Description
---- | ---- | -----------
**type** | _string_ | `docker`
**data** | _object_ | Data is not used by the Docker lifecycle. Valid value is `{}`.

